plugins {
    id "java"
    id "cpp"
    id "edu.wpi.first.GradleRIO" version "2025.2.1"
    id 'edu.wpi.first.GradleJni' version '1.1.0'
    id "com.peterabeles.gversion" version "1.10"
    id "com.diffplug.spotless" version "6.12.0"
}

import edu.wpi.first.gradlerio.wpi.java.*;
import edu.wpi.first.gradlerio.wpi.WPIPlugin;
import org.gradle.internal.os.OperatingSystem;
import java.util.concurrent.Callable;

def configureExecutableNatives(JavaForkOptions t, Provider<ExtractNativeJavaArtifacts> extract) {
    Task tt = (Task) t
    tt.dependsOn extract
    Provider<DirectoryProperty> destDir = project.getProviders().provider({
        return extract.get().getDestinationDirectory()
    })
    tt.getInputs().dir(destDir)
    tt.doFirst(new TestTaskDoFirstAction(t, destDir))
}

def configureJavaExecTask(JavaExec t, boolean debug) {
    def extractArtifacts;
    PatternFilterable filterable = new PatternSet()
    filterable.include("**/*.so*", "**/*.dylib", "**/*.pdb", "**/*.dll")

    if (debug) {
        extractArtifacts = project.getTasks().register("extractDebugNative2", ExtractNativeJavaArtifacts.class)
        def debugNativeConfiguration = project.getConfigurations().create("nativeDebug2")
        ArtifactView debugView = debugNativeConfiguration.getIncoming().artifactView({ viewConfiguration ->
            viewConfiguration.attributes({ attributeContainer ->
                attributeContainer.attribute(WPIPlugin.NATIVE_ARTIFACT_FORMAT, WPIPlugin.NATIVE_ARTIFACT_DIRECTORY_TYPE)
            })
        })
        Callable<Set<File>> debugCallable = {
            return debugView.getFiles()
                    .getAsFileTree()
                    .matching(filterable)
                    .getFiles()
        }
        def debugFileCollection = project.files(debugCallable)
        extractArtifacts.configure({ extract ->
            extract.getDestinationDirectory().set(project.getLayout().getBuildDirectory().dir("jni/debug"))
            extract.getFiles().from(wpi.sim.getDebugFileCollection())
            extract.getFiles().from(debugFileCollection)
        })
    } else {
        extractArtifacts = project.getTasks().register("extractReleaseNative2", ExtractNativeJavaArtifacts.class)
        def releaseNativeConfiguration = project.getConfigurations().create("nativeRelease2;")
        ArtifactView releaseView = releaseNativeConfiguration.getIncoming().artifactView({ viewConfiguration ->
            viewConfiguration.attributes({ attributeContainer ->
                attributeContainer.attribute(WPIPlugin.NATIVE_ARTIFACT_FORMAT,
                        WPIPlugin.NATIVE_ARTIFACT_DIRECTORY_TYPE);
            });
        });
        Callable<Set<File>> releaseCallable = {
            return releaseView.getFiles()
                    .getAsFileTree()
                    .matching(filterable)
                    .getFiles()
        }
        def releaseFileCollection = project.files(releaseCallable)
        extractArtifacts.configure({ extract ->
            extract.getDestinationDirectory().set(project.getLayout().getBuildDirectory().dir("jni/release"))
            extract.getFiles().from(wpi.sim.getReleaseFileCollection())
            extract.getFiles().from(releaseFileCollection)
        })
    }

    configureExecutableNatives(t, extractArtifacts)
    if (OperatingSystem.current().isMacOsX()) {
        t.jvmArgs("-XstartOnFirstThread")
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

def ROBOT_MAIN_CLASS = "org.curtinfrc.frc2025.Main"

nativeUtils {
    exportsConfigs {
        // Only export explicit symbols from driver library
        TrajgenJNI {
        }
    }
}

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project DeployUtils.
deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = project.frc.getTeamNumber()
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                // First part is artifact name, 2nd is artifact type
                // getTargetTypeClass is a shortcut to get the class type using a string

                frcJava(getArtifactTypeClass('FRCJavaArtifact')) {
                    // https://www.chiefdelphi.com/t/2024-wpilib-feedback/464322/141
                    final MAX_JAVA_HEAP_SIZE_MB = 100;
                    jvmArgs.add("-XX:+UnlockExperimentalVMOptions")

                    // Set the minimum heap size to the maximum heap size to avoid resizing
                    jvmArgs.add("-Xmx" + MAX_JAVA_HEAP_SIZE_MB + "M")
                    jvmArgs.add("-Xms" + MAX_JAVA_HEAP_SIZE_MB + "M")
                    jvmArgs.add("-XX:GCTimeRatio=5")
                    jvmArgs.add("-XX:+UseSerialGC")
                    jvmArgs.add("-XX:MaxGCPauseMillis=50")
                }

                // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                    // Change to true to delete files on roboRIO that no
                    // longer exist in deploy directory on roboRIO
                    deleteOldFiles = true
                }
            }
        }
    }
}

task refreshCompileCommands(type: Exec) {
    workingDir = rootDir
    def args = [
        "rm",
        "-rf",
        "$buildDir/TargetedCompileCommands"
    ]
    commandLine args
}

model {
    components {
        TrajgenJNI(JniNativeLibrarySpec) {
            targetPlatform wpi.platforms.desktop
            enableCheckTask = true
            javaCompileTasks << compileJava
            jniCrossCompileOptions << JniCrossCompileOptions(wpi.platforms.desktop)

            sources {
                cpp {
                    source {
                        srcDirs 'src/main/native/cpp'
                        include '**/*.cpp'
                    }

                    exportedHeaders {
                        srcDir 'src/main/native/include'
                    }
                }
            }

            binaries.all {
                lib project: ':trajoptlib', library: 'TrajoptLib', linkage: 'static'
            }

            nativeUtils.useRequiredLibrary(it, "wpilib_shared")
        }
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcJava

// Set to true to use debug for JNI.
wpi.java.debugJni = false

// Set this to true to enable desktop support.
def includeDesktopSupport = true

task(replayWatch, type: JavaExec) {
    mainClass = "org.littletonrobotics.junction.ReplayWatch"
    classpath = sourceSets.main.runtimeClasspath
}

// Check robot type when deploying
task(checkRobot, dependsOn: "classes", type: JavaExec) {
    mainClass = "org.curtinfrc.frc2025.Constants"
    classpath = sourceSets.main.runtimeClasspath
}

deployroborio.dependsOn(checkRobot)

task(regenerateTrajectories, dependsOn: "classes", type: Exec) {
    workingDir = rootDir
    def args = [
        "choreo-cli",
        "--chor=src/main/deploy/choreo/autos.chor",
        "--generate",
        "--all-trajectory"
    ]
    commandLine args
}

project.compileJava.finalizedBy(regenerateTrajectories)

task(generateTrajectories, dependsOn: "classes", type: JavaExec) {
    mainClass = "org.curtinfrc.frc2025.auto.TrajectoryGenerator"
    classpath = sourceSets.main.runtimeClasspath
    jvmArgs += "-Djava.library.path=${buildDir}/libs/trajgenJNI/shared/release"
}
configureJavaExecTask(generateTrajectories, project.frc.getDebugOrDefault(false))

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 4.
dependencies {
    annotationProcessor wpi.java.deps.wpilibAnnotations()
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
    roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

    roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
    roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    def akitJson = new groovy.json.JsonSlurper().parseText(new File(projectDir.getAbsolutePath() + "/vendordeps/AdvantageKit.json").text)
    annotationProcessor "org.littletonrobotics.akit:akit-autolog:$akitJson.version"
}

test {
    useJUnitPlatform()
    systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
}

// Simulation configuration (e.g. environment variables).
//
// The sim GUI is *disabled* by default to support running
// AdvantageKit log replay from the command line. Set the
// value to "true" to enable the sim GUI by default (this
// is the standard WPILib behavior).
if (project.hasProperty("simGui")) {
    wpi.sim.addGui().defaultEnabled = true
} else {
    wpi.sim.addGui().defaultEnabled = false
}
wpi.sim.addDriverstation()

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    from sourceSets.main.allSource
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Configure jar and deploy tasks
deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)
wpi.java.configureTestTasks(test)

// Configure string concat to always inline compile
tasks.withType(JavaCompile) {
    options.compilerArgs.add '-XDstringConcat=inline'
    options.encoding = 'UTF-8'
}

// Create version file
project.compileJava.dependsOn(createVersionFile)
gversion {
    srcDir       = "src/main/java/"
    classPackage = "org.curtinfrc.frc2025"
    className    = "BuildConstants"
    dateFormat   = "yyyy-MM-dd HH:mm:ss z"
    timeZone     = "Australia/Perth"
    indent       = "  "
}

// Create commit with working changes on event branches
task(eventDeploy) {
    doLast {
        if (project.gradle.startParameter.taskNames.any({ it.toLowerCase().contains("deploy") })) {
            def branchPrefix = "event"
            def branch = 'git branch --show-current'.execute().text.trim()
            def commitMessage = "Update at '${new Date().toString()}'"

            if (branch.startsWith(branchPrefix)) {
                exec {
                    workingDir(projectDir)
                    executable 'git'
                    args 'add', '-A'
                }
                exec {
                    workingDir(projectDir)
                    executable 'git'
                    args 'commit', '-m', commitMessage
                    ignoreExitValue = true
                }

                println "Committed to branch: '$branch'"
                println "Commit message: '$commitMessage'"
            } else {
                println "Not on an event branch, skipping commit"
            }
        } else {
            println "Not running deploy task, skipping commit"
        }
    }
}
createVersionFile.dependsOn(eventDeploy)

// Spotless formatting
project.compileJava.dependsOn(spotlessApply)
spotless {
    java {
        target fileTree(".") {
            include "**/*.java"
            exclude "**/build/**", "**/build-*/**"
        }
        toggleOffOn()
        googleJavaFormat()
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
    }
    groovyGradle {
        target fileTree(".") {
            include "**/*.gradle"
            exclude "**/build/**", "**/build-*/**"
        }
        greclipse()
        indentWithSpaces(4)
        trimTrailingWhitespace()
        endWithNewline()
    }
    json {
        target fileTree(".") {
            include "**/*.json"
            exclude "**/build/**", "**/build-*/**"
        }
        gson().indentWithSpaces(2)
    }
    format "misc", {
        target fileTree(".") {
            include "**/*.md", "**/.gitignore"
            exclude "**/build/**", "**/build-*/**"
        }
        trimTrailingWhitespace()
        indentWithSpaces(2)
        endWithNewline()
    }
}
