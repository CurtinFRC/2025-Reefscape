plugins {
    id 'java'
}

repositories {
    mavenCentral()
}

dependencies {
    // Define any required dependencies here
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

def nativeDir = "$projectDir/app/native"
def tinympcDir = "$nativeDir/tinympc"
def eigenDir = "$projectDir/../../eigen"
def libsDir = "$projectDir/app/libs"
def libsLinkDir = "$libsDir"

// Detect operating system
def os = org.gradle.nativeplatform.platform.internal.DefaultNativePlatform.getCurrentOperatingSystem()
def isWindows = os.isWindows()
def isLinux = os.isLinux()
def isMac = os.isMacOsX()

// Dynamically detect WPILib JDK based on OS
def wpilibJdkPath = isWindows
        ? file("C:/Users/Public/wpilib").listFiles()?.find { it.isDirectory() && it.name.isNumber() }?.absolutePath + "/jdk"
        : file("${System.getProperty('user.home')}/wpilib").listFiles()?.find { it.isDirectory() && it.name.isNumber() }?.absolutePath + "/jdk"

if (!wpilibJdkPath || !file(wpilibJdkPath).exists()) {
    throw new GradleException("WPILib JDK not found. Ensure it is installed in the correct location:\n" +
    "Windows: C:/Users/Public/wpilib/YYYY\n" +
    "macOS/Linux: ~/wpilib/YYYY")
}

def javaHome = wpilibJdkPath

// Paths for JNI headers
def jniIncludePath = isWindows
        ? "${javaHome}/include"
        : isMac
        ? "/System/Library/Frameworks/JavaVM.framework/Headers"
        : "${javaHome}/include"
def jniIncludeOSPath = isWindows
        ? "${javaHome}/include/win32"
        : isMac
        ? ""
        : "${javaHome}/include/linux"

// Build Eigen library using CMake
task buildEigen(type: Exec) {
    description = 'Build Eigen library using CMake'
    workingDir = eigenDir
    doFirst {
        file("$eigenDir/build").mkdirs()
    }
    commandLine 'cmake', '-Bbuild', '-H.', '-DCMAKE_BUILD_TYPE=Release',
            "-DCMAKE_INSTALL_PREFIX=${libsDir}/eigen",
            '-DEIGEN_TEST_NOQT=ON', // Disable Qt-based tests
            '-DEIGEN_TESTS=OFF',    // Disable all unit tests
            '-DBUILD_TESTING=OFF',  // Disable CTest integration
            '-DEIGEN_BUILD_DOC=OFF' // Skip building documentation
}

task installEigen(type: Exec, dependsOn: buildEigen) {
    description = 'Install Eigen library'
    workingDir = "$eigenDir/build"
    commandLine 'cmake', '--install', '.'
}

// TinyMPC build commands
task compileTinyMPC(type: Exec, dependsOn: installEigen) {
    description = 'Compile the TinyMPC library using CMake'
    workingDir = tinympcDir
    doFirst {
        file("$tinympcDir/build").mkdirs()
    }
    commandLine 'cmake', '-Bbuild', '-H.', '-DCMAKE_BUILD_TYPE=Release',
            "-DCMAKE_ARCHIVE_OUTPUT_DIRECTORY=${libsDir}",
            "-DCMAKE_LIBRARY_OUTPUT_DIRECTORY=${libsDir}",
            "-DCMAKE_RUNTIME_OUTPUT_DIRECTORY=${libsDir}",
            '-DBUILD_SHARED_LIBS=ON',
            "-DEIGEN3_INCLUDE_DIR=${libsDir}/eigen/include/eigen3",
            "-DCMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE=${libsDir}",
            "-DCMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE=${libsDir}",
            "-DCMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE=${libsDir}"
}

task buildTinyMPC(type: Exec, dependsOn: compileTinyMPC) {
    description = 'Build the TinyMPC library'
    workingDir = "$tinympcDir/build"
    commandLine 'cmake', '--build', '.'
}

// JNI compilation
task compileJNI(type: Exec, dependsOn: buildTinyMPC) {
    description = 'Compile the JNI library'
    workingDir = nativeDir

    def outputLibrary = isWindows
            ? "${libsLinkDir}/tinympc_jni.dll"
            : isMac
            ? "${libsLinkDir}/libtinympc_jni.dylib"
            : "${libsLinkDir}/libtinympc_jni.so"

    def compiler = isWindows ? 'g++' : 'clang++'

    commandLine compiler,
            '-shared',
            '-fPIC',
            '-std=c++14',
            '-I', jniIncludePath,
            '-I', jniIncludeOSPath,
            '-I', tinympcDir,
            '-I', "${libsDir}/eigen/include/eigen3", // Include compiled Eigen headers
            '-L', libsDir,
            // '-ltinympcstatic', // Link static TinyMPC library
            '-ltinympc',       // Link shared TinyMPC library
            '-o', outputLibrary,
            "TinyMPCWrapper.cpp"
}

// Link tasks
tasks.build {
    dependsOn compileJNI
}

tasks.jar {
    from("$libsDir") {
        into 'native'
        include(isWindows ? 'tinympc_jni.dll' : isMac ? 'libtinympc_jni.dylib' : 'libtinympc_jni.so')
    }
    from('app/src/main/java') {
        into ''
    }
    archiveBaseName.set('tinympc')
    archiveVersion.set('1.0')
    destinationDirectory.set(file("$rootDir/libs"))
}

artifacts {
    archives tasks.jar
}
